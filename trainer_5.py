# ---------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------
#                           ЗАДАЧИ ПО ПРОГРАММИРОВАНИЮ
#                                   ПО ГЛАВАМ
# Книга: Начинаем программировать на Python. Тони Гэддис. 4-е издание. 2019г.
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
#                                 Глава 5. Функции
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------

# ----------------------------------------------------------------------------------
# 1. Конвертер километров. Напишите программу, которая просит пользователя ввести
# расстояние в километрах и затем это расстояние преобразует в мили.
# Формула преобразования:
#                   мили = километры х 0.6214.

# # Главная функция
# def main():
#     distance = float(input('Введите расстояние в километрах: '))
#
#     # Вызов функции calc_dist_miles, которая принимает переменную distance в качестве аргумента
#     # и присваивание этой ф-ии в перменную result
#     results = calc_dist_miles(distance)
#
#     print('Расстояние в милях равняется - ', format(results, '.2f'))
#
# # Функция calc_dist_miles примнимает расстояние (kilometer) в качестве аргумента
# # переводит расстояние (км) в мили и возвращает мили (miles)
# def calc_dist_miles(kilometer):
#     miles = kilometer * 0.6214
#     return miles
#
# main()  # Вызов главной ф-ии
# -----------------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------------
# 2. Модернизация программы расчета налога с продаж. В задаче 6 по программированию
# из главы 2 рассматривалась программа расчета налога с продаж. Требовалось
# написать программу, которая вычисляет и показывает региональный и федеральный
# налоги с продаж, взимаемые при покупке. Если эта программа уже вами написана,
# модернизируйте ее так, чтобы подзадачи были помещены в функции. Если вы ее еще
# не написали, то напишите с использованием функций.
#                                       |
#                                       |
#                                     \ | /
#                                      \ /
# -------------------   #   -----------------   #   ----------------    #   --------------
#                           Глава 2. Задача 6. Налог с продаж.
# Напишите программу, которая попросит пользователя ввести величину
# покупки. Затем программа должна вычислить федеральный и региональный налог с продаж.
# Допустим, что федеральный налог с продаж составляет 5%, а региональный – 2.5%. Программа
# должна показать сумму покупки, федеральный налог с продаж, региональный налог с продаж,
# общий налог с продаж и общую сумму продажи (т. е. сумму покупки и общего налога с продаж).
# Подсказка: для представления 2.5% используйте значение 0.025, для представления 5% – 0.05.
# -------------------   #   -----------------   #   ----------------    #   --------------

# def main():     # Главная функция
#
#     federal_tax = 0.05      # федеральный налог
#     regional_tax = 0.025        # региональный налог
#     sum_product = float(input('Введите величину покупки: '))    # Сумма покупки
#
# #   Вызов ф-ий и их присваивание в перменные
#     federal_sales_tax = calc_federal_sales_tax(sum_product, federal_tax)
#     regional_sales_tax = calc_regional_sales_tax(sum_product, regional_tax)
#     all_sales_tax = calc_all_sales_tax(federal_sales_tax, regional_sales_tax)
#     total_sum = calc_total_sum(sum_product, all_sales_tax)
#     results = output_of_results(sum_product, federal_sales_tax, regional_sales_tax, all_sales_tax, total_sum)
#
#     print(results)
#
# # Федеральный налог с продаж
# def calc_federal_sales_tax(product, fed_t):
#     return product * fed_t
#
# # Региональный налог с продаж
# def calc_regional_sales_tax(product, reg_t):
#     return product * reg_t
#
# # Общий налог с продаж
# def calc_all_sales_tax(fed_s_t, reg_s_t):
#     return fed_s_t + reg_s_t
#
# # Общая сумма продажи (сумма покупки и общий налог с продаж)
# def calc_total_sum(product, all_s_t):
#     return product + all_s_t
#
# # Вывод результатов
# def output_of_results(product, fed_s_t, reg_s_t, all_s_t, tot_sum):
#     print('Сумма покупки составляет', format(product, '.2f'), 'рублей')
#     print('Федеральный налог с продаж составляет',
#           format(fed_s_t, '.2f'), 'рублей')
#     print('Региональный налог с продаж составляет',
#           format(reg_s_t, '.2f'), 'рублей')
#     print('Общий налог с продаж составляет',
#           format(all_s_t, '.2f'), 'рублей')
#     print('Общая сумма продажи составляет', format(tot_sum, '.2f'), 'рублей')
#
# main()    # Вызов главной ф-ии
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 3. Какова стоимость страховки? Многие финансовые эксперты рекомендуют собственникам
# недвижимого имущества страховать свои дома или здания как минимум на 80% суммы
# замещения строения. Напишите программу, которая просит пользователя ввести
# стоимость строения и затем показывает минимальную страховую сумму, на которую он
# должен застраховать недвижимое имущество.

# def main():     # Главная ф-я
# #
#     cost_of_property = float(input('Введите стоимость имущества: '))    # стоимость
#
# #    Вызов ф-ий и их присваивание в перменные
#     insurance = calc_insurance(cost_of_property)     # страховка
#     results = output_of_results(cost_of_property, insurance)
#
#     print(results)    # вывод результатов
#
# # Расчет страховки
# def calc_insurance(cost):
#     return cost * 0.8
#
# # Вывод результатов
# def output_of_results(cost, ins):
#     print('Стоимость имущества составляет' , format(cost, '.2f'), 'рублей')
#     print('Стоимость страховки составляет' , format(ins, '.2f'), 'рублей')
#
# main()    # Вызов главной ф-ии
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 4. Расходы на автомобиль. Напишите программу, которая просит пользователя ввести
# месячные расходы на следующие нужды, связанные с его автомобилем: платеж по
# кредиту, страховка, бензин, машинное масло, шины и техобслуживание. Затем
# программа должна показать общую месячную стоимость и общую годовую стоимость
# этих расходов.

# def main(): # Главная ф-ия
#     # Вызов функций и присваивание их в переменные
#     monthly_expenses = calc_monthly_expenses()
#     annual_expenses = calc_annual_expenses(monthly_expenses)
#
#     # Вывод результатов
#     print('Месячная стоимость расходов на автомобтль составляет', monthly_expenses, 'рублей')
#     print('Годовая стоимость расходов на автомобтль составляет', annual_expenses, 'рублей')
#
# # Месячная стоимость расходов на автомобиль
# def calc_monthly_expenses():
#     credit = float(input('Введите расход на кредит: '))
#     insurance = float(input('Введите расход на страховку: '))
#     benzine = float(input('Введите расход на бензин: '))
#     oil = float(input('Введите расход на масло: '))
#     tires = float(input('Введите расход на шины: '))
#     technical_service = float(input('Введите расход на техобслуживание: '))
#     return credit + insurance + benzine + oil + tires + technical_service
#
# # Годовая стоимость расходов на автомобиль
# def calc_annual_expenses(expenses):
#     return expenses * 12
#
# main()  # Вызов главной ф-ии
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 5. Налог на недвижимое имущество. Муниципальный округ собирает налоги на
# недвижимое имущество на основе оценочной стоимости имущества, составляющей 60%
# его фактической стоимости. Например, если акр земли оценен в 10 000 долларов,
# то его оценочная стоимость составит 6000 долларов. В этом случае налог на имущество
# составит 72 цента за каждые 100 долларов оценочной стоимости. Налог на акр,
# оцененный в 6000 долларов, составит 43,20 доллара. Напишите программу, которая
# запрашивает фактическую стоимость недвижимого имущества и показывает оценочную
# стоимость и налог на имущество.

# def main():     # Главная ф-я
#     actual_cost = int(input('Введите фактическую стоимость недвижимости: '))
#
#     # Вызов ф-ий и присваивание их в переменные
#     estimated_cost = calc_estimated_cost(actual_cost)
#     tax = calc_tax(actual_cost)
#     result = output_of_result(actual_cost, estimated_cost, tax)
#
#     print(result)
#
# # Оценочная стоимость
# def calc_estimated_cost(act_cost):
#     return act_cost * 0.6
#
# # Вычисление налога на имущество
# def calc_tax(act_c):
#     tax_cost = act_c / 100
#     return tax_cost * 0.72
#
# # Вывод результатов
# def output_of_result(act_c, est_c, t):
#     print('Фактическая стоимость недвижимого имущества составляет', format(act_c, '.1f'), 'доллара')
#     print('Оценочная стоимость недвижимого имущества составляет', format(est_c, '.1f'), 'доллара')
#     print('Налог недвижимого имущества составляет', format(t, '.1f'), 'доллара')
#
# main()  # Вызов главной ф-ии
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 6. Калории за счет жиров и углеводов. Диетолог работает в спортивном клубе и дает
# рекомендации клиентам в отношении диеты. В рамках своих рекомендаций он запрашивает
# у клиентов количество граммов жиров и углеводов, которые они употребили за день.
# Затем на основе приведенной ниже формулы он вычисляет количество калорий, которые
# получаются в результате употребления жиров:
#                   калории от жиров = граммы жиров х 9.
# Затем на основе еще одной формулы он вычисляет количество калорий, которые
# получаются в результате употребления углеводов:
#               калории от углеводов = граммы углеводов х 4.
# Диетолог просит вас написать программу, которая выполнит эти расчеты.

# def main():   # Главная функция
#     # Запрос результатов от пользователя
#     fats = int(input('Введите количество жиров: '))
#     carbs = int(input('Введите количество углеводов: '))
#
#     # Вызов ф-ий и присваивания их в переменнные
#     calories_from_fats = calc_calories_from_fats(fats)
#     calories_from_carbs = calc_calories_from_carbs(carbs)
#     result = output_of_result(calories_from_fats, calories_from_carbs)
#
#     print(result)   # вывод результатов
#
# # Количество калорий, которые получаются в результате употребления жиров
# def calc_calories_from_fats(fat):
#     return fat * 9
#
# # Количество калорий, которые получаются в результате употребления углеводов
# def calc_calories_from_carbs(carb):
#     return carb * 4
#
# # Вывод результатов
# def output_of_result(calories_f, calories_c):
#     print(calories_f, 'калорий получаются в результате употребления жиров')
#     print(calories_c ,'калорий получаются в результате употребления углеводов')
#
# main()    # Вызов главной ф-ии
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
# 7. Сидячие места на стадионе. На стадионе имеется три категории сидячих мест.
# Места класса А стоят 20 долларов, места класса В- 15 долларов и места класса С
# 10 долларов. Напишите программу, которая запрашивает, сколько билетов каждого
# класса было продано, и затем выводит сумму дохода, полученного за счет продажи
# билетов.

# def main():     # Главная функция
#     # Вызов функций и присваивание их в переменные
#     class_a, class_b, class_c = places()
#     sum_of_income = calc_sum_of_income(class_a, class_b, class_c)
#
#     print('Сумма дохода составляет', sum_of_income, 'долларов')
#
# # Запрос каждого класса от пользователя
# def places():
#     a = int(input('Сколько билетов класса А было продано? '))
#     b = int(input('Сколько билетов класса B было продано? '))
#     c = int(input('Сколько билетов класса C было продано? '))
#     return a, b, c
#
# # Cумма дохода, полученная за счет продажи билетов
# def calc_sum_of_income(a, b, c):
#     return (a * 20) + (b * 15) + (c * 10)
#
# main()    # Вызов главной функции
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 8. Оценщик малярных работ. Малярная компания установила, что на каждые 10
# квадратных метров поверхности стены требуется 5 литров краски и 8 часов работы.
# Компания взимает за работу 2000 руб. в час. Напишите программу, которая просит
# пользователя ввести площадь поверхности окрашиваемой стены и цену 5-литровой
# емкости краски.
# Программа должна показать следующие данные:
#   • количество требующихся емкостей краски;
#   • количество требующихся рабочих часов;
#   • стоимость краски;
#   • стоимость работы;
#   • общая стоимость малярных работ.

# def main():
#     # Вызов функций и присваение их в переменные
#     square, price_of_paint = get_information()
#
#     square_10 = square / 10     # делю на 10м2 поверхности
#
#     amount_of_paint = calc_amount_of_paint(square)
#     hours = calc_hours(square_10)
#     cost_of_paint = calc_cost_of_paint(price_of_paint, amount_of_paint)
#     cost_of_work = calc_cost_of_work(hours)
#     all_cost_of_painting = calc_all_cost_of_painting(cost_of_paint, cost_of_work)
#     result = output_of_result(amount_of_paint, hours, cost_of_paint, cost_of_work, all_cost_of_painting)
#
#     # Вывод результатов
#     print(result)
#
# # Получаем данные от пользователя
# def get_information():
#     square = float(input('Введите площадь поверхности окрашиваемой стены: '))
#     price_of_paint = float(input('Введите цену 5-литровой емкости краски: '))
#     return square, price_of_paint
#
# # Расчет количества требующихся емкостей краски
# def calc_amount_of_paint(s):
#     return s / 10
#
# # Расчет количества требующихся рабочих часов
# def calc_hours(s_10):
#     return s_10 * 8
#
# # Расчет стоимости краски
# def calc_cost_of_paint(price_paint, amount_paint):
#     return price_paint * amount_paint
#
# # Расчет стоимости работы
# def calc_cost_of_work(hour):
#     return hour * 2000
#
# # Расчет общей стоимость малярных работ
# def calc_all_cost_of_painting(c_paint, c_work):
#     return c_paint + c_work
#
# # Вывод результатов
# def output_of_result(a_paint, hour, c_paint, c_work, all_c_p):
#     print('Количество требующихся емкостей краски', a_paint)
#     print('Количество требующихся рабочих часов', hour)
#     print('Стоимость краски', c_paint, 'рублей')
#     print('Стоимость работы', c_work, 'рублей')
#     print('Общая стоимость малярных работ', all_c_p, 'рублей')
#
# main()  # Вызов главной
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 9. Месячный налог с продаж. Розничная компания должна зарегистрировать отчет о
# месячном налоге с продаж с указанием общего налога с продаж за месяц и взимаемых
# сумм муниципального и федерального налогов с продаж. Федеральный налог с продаж
# составляет 5%, муниципальный налог с продаж - 2,5%. Напишите программу, которая
# просит пользователя ввести общий объем продаж за месяц. Из этого значения
# приложение должно рассчитать и показать:
#   • сумму муниципального налога с продаж;
#   • сумму федерального налога с продаж;
#   • общий налог с продаж (муниципальный плюс федеральный).

# def main():     # Главная функция
#     federal_tax = 0.05      # федеральный налог
#     municipal_tax = 0.025       # муниципальный налог
#
#     # Данные от пользователя
#     total_monthly_sales = float(input('Введите общий продаж за месяц: '))
#
#     # Вызов функций и присваивание их в переменные
#     sum_federal_tax = calc_sum_federal_tax(federal_tax, total_monthly_sales)
#     sum_municipal_tax = calc_sum_municipal_tax(municipal_tax, total_monthly_sales)
#     total_taxes = calc_total_taxes(sum_federal_tax, sum_municipal_tax)
#     results = output_of_results(sum_federal_tax, sum_municipal_tax, total_taxes)
#
#     print(results)  # Вывод
#
# # Сумма федерадьного налога с продаж
# def calc_sum_federal_tax(f_t, monthly_sales):
#     return f_t * monthly_sales
#
# # Сумма муниципального налога с продаж
# def calc_sum_municipal_tax(m_t, monthly_sales):
#     return m_t * monthly_sales
#
# # Общий налог с продаж (муниципальный плюс федеральный)
# def calc_total_taxes(s_f_t, s_m_t):
#     return s_f_t + s_m_t
#
# def output_of_results(s_f_t, s_m_t, t_t):
#     print('Cумма федерального налога с продаж', s_f_t, 'рублей')
#     print('Сумма муниципального налога с продаж', s_m_t, 'рублей')
#     print('Общий налог с продаж', t_t, 'рублей')
#
# main()      # Вызов главной функции
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 10. Футы в дюймы. Один фут равняется 12 дюймам. Напишите функцию feet_to_inches,
# которая в качестве аргумента принимает количество футов и возвращает количество
# дюймов в этом количестве футов. Примените эту функцию в программе, которая
# предлагает пользователю ввести количество футов и затем показывает количество
# дюймов в этом количестве футов.

# def main():     # Главная функция
#     # Запрос от пользователя кол-во футов
#     feet = float(input('Введите количество футов: '))
#
#     # Вызов ф-ии feet_to_inches
#     inches = feet_to_inches(feet)
#
#     # Вывод результатов
#     print('В', feet, 'футов будет', inches, 'дюймов')
#
# # Перевод из футов в дюймы
# def feet_to_inches(foot):
#     return foot * 12      # возвращает дюймы
#
# main()      # Вызов главной функции
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 11. Математический тест. Напишите программу, которая позволяет проводить простые
# математические тесты. Она должна показать два случайных числа, которые должны быть
# просуммированы вот так:
# 247
# + 129
# Эта программа должна давать обучаемому возможность вводить ответ. Если ответ
# правильный, то должно быть показано поздравительное сообщение. Если ответ
# неправильный, то должно быть показано сообщение с правильным ответом.

# import random     # импорт модуля random
#
# Вызывает функцию randint, передавая ей 2 аргумента. Присваиваем в переменную
# Функция возвращает случайное число в диапазоне от 1 до 1000
# num_1 = random.randint(0, 1000)
# num_2 = random.randint(0, 1000)
#
# print(num_1)
# print('+', num_2)
# print('-----')
#
# user_answer = int(input('Введите сумму этих чисел: '))
#
# Проверяем правильность ответа пользователя
# if user_answer == num_1 + num_2:
#     print('Правильно!')
# else:
#     print('Неверно! Правильный ответ', num_1 + num_2)
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 13. Максимальное из двух значений. Напишите функцию мах, которая в качестве
# аргументов принимает два целочисленных значения и возвращает значение, которое
# является большим из двух. Например, если в качестве аргументов переданы 7 и 12,
# то функция должна вернуть 12. Примените функцию в программе, которая предлагает
# пользователю ввести два целочисленных значения. Программа должна показать большее
# значение из двух.

# def main():
#     # Вызов функций и присваивание их в перменные
#     num_1, num_2 = get_request()
#     max_num = max(num_1, num_2)
#
#     print ('Большим значением является число', max_num)
#
# # Запрос от пользователя двух целочисленных значения
# def get_request():
#     n1 = int(input('Введите певрое целое число: '))
#     n2 = int(input('Введите второе целое число: '))
#     return n1, n2
#
# # Функция возвращает значение, которое является большим из двух
# def max(n1, n2):
#     if n1 > n2:
#         return n1
#     else:
#         return n2
#
# main()
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 14. Высота падения. При падении тела под действием силы тяжести для определения
# расстояния, которое тело пролетит за определенное время, применяется формула:
#                                   d = 1/2 * g * t^2,
# где d - расстояние, м; g = 9.8, м/с2; t — время падения тела, с.
# Напишите функцию falling_dtstance, которая в качестве аргумента принимает время
# падения тела (в секундах). Функция должна вернуть расстояние в метрах, которое тело
# пролетело во время этого промежутка времени. Напишите программу, которая вызывает
# эту функцию в цикле, передает значения от 1 до 10 в качестве аргументов и
# показывает возвращаемое значение.

# def main():
#     # Цикл
#     for time in range(1, 11):
#         distance_fall = falling_distance(time)
#         print(format(distance_fall, '.1f'), 'метров пролетело тело за', time, 'секунд')
#
# # Функция принимает в качестве аргумента время падения тела и возвращает расстояние,
# # которое тело пролетело во время этого промежутка времени
# def falling_distance(t):
#     g = 9.8
#     d = 0.5 * g * (t**2)
#     return d
#
# main()
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 15. Кинетическая энергия. Из физики известно, что движущееся тело имеет кинетическую
# энергию. Приведенная ниже формула может использоваться для определения кинетической
# энергии движущегося тела:
#                                   Kε = 1/2*m*v^2,
# где Ке - это кинетическая энергия; m - масса тела, кг; ѵ - скорость тела, м/с.
# Напишите функцию kinetic_energy, которая в качестве аргументов принимает массу тела
# (в килограммах) и его скорость (в метрах в секунду). Данная функция должна вернуть
# величину кинетической энергии этого тела. Напишите программу, которая просит
# пользователя ввести значения массы и скорости, а затем вызывает функцию kinetic_energy,
# чтобы получить кинетическую энергию тела.

# def main():
#     # Вызов функций и присваивание их в переменные
#     mass, speed = get_information()
#     kinetic = kinetic_energy(mass, speed)
#
#     # Вывод результата
#     print('Кинетическая энергия равна', format(kinetic, '.2f'))
#
# # Получение данных от пользователя
# def get_information():
#     m = float(input('Введите массу тела (в килограммах): '))
#     v = int(input('Введите скорость тела (в метрах в секунду): '))
#     return m, v
#
# # Вычисление кинетической энергии
# def kinetic_energy(m, v):
#     k = 0.5 * m * (v**2)
#     return k
#
# main()
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 16. Средний балл и его уровень. Напишите программу, которая просит пользователя
# ввести пять экзаменационных оценок. Программа должна показать буквенный уровень
# оценки для каждой оценки и средний балл. Напишите в программе приведенные ниже
# функции:
# • calc_average функция должна принимать в качестве аргументов пять оценок и
# возвращать средний балл;
# • determine_grade - функция должна принимать в качестве аргумента оценку и
# возвращать буквенный уровень оценки, опираясь на приведенную в табл. 5.3
# классификации.
# Таблица 5.3. Шкала классификации
# Оценка           Уровень
# 90 и выше           A
# 80-89               B
# 70-79               C
# 60-69               D
# Ниже 60             F

# def main():
#     # Вызов функций и присваивание их в переменные
#     g1, g2, g3, g4, g5 = get_grades()
#     average_grade = calc_average(g1, g2, g3, g4, g5)
#     results = output_of_results(average_grade, g1, g2, g3, g4, g5)
#
#     print(results)  # вывод результата
#
# # Запрос данных от пользователя
# def get_grades():
#     g_1 = int(input('Введите первую оценку за экзамен: '))
#     g_2 = int(input('Введите вторую оценку за экзамен: '))
#     g_3 = int(input('Введите третью оценку за экзамен: '))
#     g_4 = int(input('Введите четвертую оценку за экзамен: '))
#     g_5 = int(input('Введите пятую оценку за экзамен: '))
#     return g_1, g_2, g_3, g_4, g_5
#
# # Вычисление среднего балла
# def calc_average(g_1, g_2, g_3, g_4, g_5):
#     average = (g_1 + g_2 + g_3 + g_4 + g_5) / 5
#     return average
#
# # Определение буквенного уровеня оценки
# def determine_grade(score):
#     if score >= 90:
#         return 'A'
#     elif score >= 80 and score <= 89:
#         return 'B'
#     elif score >= 70 and score <= 79:
#         return 'C'
#     elif score >= 60 and score <= 69:
#         return 'D'
#     else:
#         return 'F'
#
# # Вывод результатов
# def output_of_results(average_g, g_1, g_2, g_3, g_4, g_5):
#     print('Средний балл', average_g)
#     print('Буквенный уровень 1 оценки', determine_grade(g_1))
#     print('Буквенный уровень 2 оценки', determine_grade(g_2))
#     print('Буквенный уровень 3 оценки', determine_grade(g_3))
#     print('Буквенный уровень 4 оценки', determine_grade(g_4))
#     print('Буквенный уровень 5 оценки', determine_grade(g_5))
#
# main()
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 17. Счетчик четных/нечетных чисел. В этой главе вы увидели пример написания
# алгоритма, который определяет четность или нечетность числа. Напишите программу,
# которая генерирует 100 случайных чисел и подсчитывает количество четных и нечетных
# случайных чисел.

# import random
#
# def main():
#     # Вызов функций и присваивание их в перемнные
#     even, odd = count_even_odd_numbers()
#     results = output_of_results(even, odd)
#
#     print(results)  # Вывод
#
# # Подсчет четных и нечетных чисел
# def count_even_odd_numbers():
#     count_even = 0      # счетчик четных чисел
#     count_odd = 0       # счетчик нечетных чисел
#
#     # Происходит 100 итераций. Переменная _ нигде дальше не используется.
#     for _ in range(100):
#         # Генерируется случайное число (от 1 до 100) и оно присваивается в перменную num
#         num = random.randint(1, 100)
#         if num % 2 == 0:
#             count_even += 1
#         else:
#             count_odd += 1
#
#     return count_even, count_odd
#
# # Вывод результатов
# def output_of_results(e, o):
#     print('Количество четных чисел', e)
#     print('Количество нечетных чисел', o)
#
# main()
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 18. Простые числа. Простое число это число, которое делится без остатка на само себя
# и 1. Например, число 5 является простым, потому что оно делится без остатка только
# на 1 и 5. Однако число 6 не является простым, потому что оно делится без остатка
# на 1, 2, 3 и 6.
# Напишите булеву функцию is_prime, которая в качестве аргумента принимает целое
# число и возвращает истину, если аргумент является простым числом, либо ложь в
# противном случае. Примените функцию в программе, которая предлагает пользователю
# ввести число и затем выводит сообщение с указанием, является ли это число простым.

# def main():
#     # Запрос данных от пользователя
#     integer = int(input('Введите целое число: '))
#
#     # Вызов функций
#     is_prime(integer)
#     results = output_of_results(integer)
#
#     print(results)  # Вывод
#
# # Проверка на то, является ли число простым или нет
# def is_prime(num):
#     if num <= 1:
#         return False
#
#     for i in range(2, num):
#         if num % i == 0:
#             return False
#     return True
#
# # Вывод результатов
# def output_of_results(num):
#     if is_prime(num):
#         print(num, '- простое число')
#     else:
#         print(num, 'не является простым числом')
#
# main()
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 19. Список простых чисел. Это упражнение предполагает, что вы уже написали функцию
# is_prime в задаче 17. Напишите еще одну программу, которая показывает все простые
# числа от 1 до 100. Программа должна иметь цикл, который вызывает функцию is_prime.

# Проверка на то, является ли число простым или нет
# def is_prime(n):
#     if n <= 1:
#         return False
#     for i in range(2, int(n**0.5) + 1): # поиск других делителей
#         if n % i == 0:
#             return False
#     return True
#
# # Цикл от 1 до 100
# for number in range(1, 101):
#     if is_prime(number):
#         print(number)
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 20. Будущая стоимость. Предположим, что на вашем сберегательном счете есть
# определенная сумма денег, и счет приносит составной ежемесячный процентный доход.
# Вы хотите вычислить сумму, которую будете иметь после определенного количества
# месяцев. Формула приведена ниже:
#                               F = P x (1 + i)^t,
# где F - будущая сумма на счете после указанного периода времени; Р- текущая сумма
# на счете; і - ежемесячная процентная ставка; t - количество месяцев.
# Напишите программу, которая предлагает пользователю ввести текущую сумму на счете,
# ежемесячную процентную ставку и количество месяцев, в течение которых деньги будут
# находиться на счете. Программа должна передать эти значения в функцию, которая
# возвращает будущую сумму на счете после заданного количества месяцев. Программа
# должна показать будущую сумму на счете.

# def main():
#     # Вызов функций и присваивание их в переменные
#     P, I, T = get_name()
#     F = calc_f_sum(P, I, T)
#
#     # Вывод результата
#     print(format(F, '.1f'), 'рублей', '- будущая сумма на счете')
#
# # Запрос данных от пользователя
# def get_name():
#     p = float(input('Введите текущую сумму на счете: '))
#     i = float(input('Введите ежемесячную процентную ставку: '))
#     t = int(input('Введите количество месяцев, в течение которых деньги будут находиться на счете: '))
#     return p, i, t
#
# # Расчет будущей суммы на счете
# def calc_f_sum(p, i, t):
#     f = p * (1 + i)**t
#     return f
#
# main()
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 21. Игра в угадывание случайного числа. Напишите программу, которая генерирует
# случайное число в диапазоне от 1 до 100 и просит пользователя угадать это число.
# Если догадка пользователя больше случайного числа, то программа должна вывести
# сообщение "Слишком много, попробуйте еще раз". Если догадка меньше случайного
# числа, то программа должна вывести сообщение "Слишком мало, попробуйте еще раз".
# Если пользователь число угадывает, то приложение должно поздравить пользователя
# и сгенерировать новое случайное число, чтобы возобновить игру.
# Необязательное улучшение: улучшите игру, чтобы она вела подсчет догадок, которые
# делает пользователь. Когда пользователь угадывает случайное число правильно,
# программа должна показать количество догадок.

# import random
#
# def main():
#     # Вызов функций и присваивание их в переменные
#     wrote_message()
#     trying_to_guess()
#
# # Вывод сообщения
# def wrote_message():
#     print('Случайное число сгенерировано!')
#     print('Попытайтесь угадать его!')
#
# # Игра в угадывание
# def trying_to_guess():
#     # Генерируется случайное число (от 1 до 100) и оно присваивается в перменную num
#     random_num = random.randint(1, 100)
#     num = int(input('Введите предполагаемое число: '))
#
#     # Проверка, угадал ли пользователь
#     if num > random_num:
#         print('Слишком много, попробуйте еще раз')
#     elif num < random_num:
#         print('Слишком мало, попробуйте еще раз')
#     else:
#         print('Поздравляем! Вы угадали число!')
#         random_num = random.randint(1, 100)     # генерация нового числа
#
# main()
# ----------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------
# 22. Игра "Камень, ножницы, бумага". Напишите программу, которая дает пользователю
# возможность поиграть с компьютером в игру "Камень, ножницы, бумага". Программа
# должна работать следующим образом:
# 1. Когда программа запускается, генерируется случайное число в диапазоне от 1 до 3.
# Если число равняется 1, то компьютер выбрал камень. Если число равняется 2, то
# компьютер выбрал ножницы. Если число равняется 3, то компьютер выбрал бумагу.
# (Пока не показывайте выбор компьютера.)
# 2. Пользователь вводит на клавиатуре выбранный вариант "камень", "ножницы" или
# "бумага".
# 3. Выбор компьютера выводится на экран.
# 4. Победитель выбирается согласно следующим правилам:
# - если один игрок выбирает камень, а другой игрок выбирает ножницы, то побеждает
# камень (камень разбивает ножницы);
# - если один игрок выбирает ножницы, а другой игрок выбирает бумагу, то побеждают
# ножницы (ножницы режут бумагу);
# - если один игрок выбирает бумагу, а другой игрок выбирает камень, то побеждает
# бумага (бумага заворачивает камень);
# - если оба игрока делают одинаковый выбор, то для определения победителя нужно
# сыграть повторный раунд.

# import random
#
# def main():   # Главная функция
#     # Вызов функций
#     choice_computer = generates_a_computer()
#     choice_player = input('Введите вариант - "камень", "ножницы" или "бумага": ')
#     print('Выбор компьютера -', choice_computer)
#     winner = learn_winner(choice_player, choice_computer)
#     print(winner)
#
# # Выбор компьютера
# def generates_a_computer():
#     gen_num = random.randint(1, 3)    # генерация рандомных чисел
#     # Узнаем какой выбор сделал компьютер
#     if gen_num == 1:
#         gen_num = 'камень'
#     elif gen_num == 2:
#         gen_num = 'ножницы'
#     else:
#         gen_num = 'бумага'
#     return gen_num
#
# # Узнаем исход раунда
# def learn_winner(player, computer):
#     if player == 'камень' and computer == 'ножницы':
#         print('Вы выиграли!')
#     elif player == 'ножницы' and computer == 'камень':
#         print('Выиграл компьютер!')
#     elif player == 'ножницы' and computer == 'бумага':
#         print('Вы выиграли!')
#     elif player == 'бумага' and computer == 'ножницы':
#         print('Выиграл компьютер!')
#     elif player == 'бумага' and computer == 'камень':
#         print('Вы выиграли!')
#     elif player == 'камень' and computer == 'бумага':
#         print('Выиграл компьютер!')
#     else:
#         print('Ничья!')
#         print('Нужно сыграть повторный раунд!')
#
# main()  # Вызов главной функции
# ----------------------------------------------------------------------------------
