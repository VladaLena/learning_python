# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
#                       ЗАДАЧИ ПО ПРОГРАММИРОВАНИЮ
#                               ПО ГЛАВАМ
# Книга: Начинаем программировать на Python. Тони Гэддис. 4-е издание. 2019г.
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
#        Глава 3. Структуры принятия решения и булева логика
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# 1. День недели. Напишите программу, которая запрашивает у пользователя число в диапазоне от 1 до 7.
# Эта программа должна показать соответствующий день недели, где 1- понедельник, 2-  вторник,
# 3 - среда, 4 - четверг, 5 - пятница, 6 суббота и 7 - воскресенье.  Программа должна вывести
# сообщение об ошибке, если пользователь вводит номер, который находится вне диапазона от 1 до 7.

# num = int(input('Введите число от 1 до 7: '))
# if num >=1 and num <= 7:
#     if num == 1:
#         print('Понедельник')
#     elif num == 2:
#         print('Вторник')
#     elif num == 3:
#         print('Среда')
#     elif num == 4:
#         print('Четверг')
#     elif num == 5:
#         print('Пятница')
#     elif num == 6:
#         print('Суббота')
#     else:
#         print('Воскресенье')
# else:
#     print('Ошибка! Вы ввели число не того промежутка, которого просили!')
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# 2. Площади прямоугольников. Площадь прямоугольника - это произведение его длины на его ширину.
# Напишите программу, которая запрашивает длину и ширину двух прямоугольников. Программа должна
# выводить пользователю сообщение о том, площадь какого прямоугольника больше, либо сообщать,
# что они одинаковы.

# # Запрос данных от пользователя
# lenght_1 = float(input('Введите длину первого прямоугольника: '))
# width_1 = float(input('Введите ширину первого прямоугольника: '))
# lenght_2 = float(input('Введите длину второго прямоугольника: '))
# width_2 = float(input('Введите ширину второго прямоугольника: '))
#
# # Вычисление площади обоих прямоугольников
# square_1 = lenght_1 * width_1
# square_2 = lenght_2 * width_2
#
# if square_1 > square_2:
#     print('Площадь первого прямоугольника больше')
# elif square_2 > square_1:
#     print('Площадь второго прямоугольника больше')
# else:
#     print('Площади этих двух прямоугольников равны')
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# 3. Классификатор возраста. Напишите программу, которая просит пользователя ввести возраст человека.
# Программа должна определить, к какой категории этот человек принадлежит: младенец, ребенок,
# подросток или взрослый, и вывести соответствующее сообщение.
# Ниже приведены возрастные рекомендации:
# • если возраст 1 год или меньше, то он или она - младенец;
# • если возраст старше 1 года, но моложе 13 лет, то он или она - ребенок;
# • если возраст не менее 13 лет, но моложе 20 лет, то он или она - подросток;
# • если возраст более 20 лет, то он или она - взрослый.

# # Запрос данных от пользователя:
# age = int(input('Введите свой возраст (в годах): '))
#
# if age <= 1:
#     print('Данный возраст относится к категории - младенец')
# elif age > 1 and age < 13:
#     print('Данный возраст относится к категории - ребенок')
# elif age >=13 and age < 20:
#     print('Данный возраст относится к категории - подросток')
# else:
#     print('Данный возраст относится к категории - взрослый')
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# 4. Римские цифры. Напишите программу, которая предлагает пользователю ввести число
# в диапазоне от 1 до 10. Программа должна показать для этого числа римскую цифру.
# Если число находится вне диапазона 1-10, то программа должна вывести сообщение об ошибке.
# В табл. 3.8 приведены римские цифры для чисел от 1 до 10:
# Число     Римская цифра
# 1               I
# 2               II
# 3              III
# 4               IV
# 5               V
# 6               VI
# 7              VII
# 8              VIII
# 9               IX
# 10              X

# Запрос данных от пользователя
# num = int(input('Введите число от 1 до 10: '))

# if num >= 1 and num <= 10:
#     if num == 1:
#         print('Римская цифра - I')
#     elif num == 2:
#         print('Римская цифра - II')
#     elif num == 3:
#         print('Римская цифра - III')
#     elif num == 4:
#         print('Римская цифра - IV')
#     elif num == 5:
#         print('Римская цифра - V')
#     elif num == 6:
#         print('Римская цифра - VI')
#     elif num == 7:
#         print('Римская цифра - VII')
#     elif num == 8:
#         print('Римская цифра - VIII')
#     elif num == 9:
#         print('Римская цифра - IX')
#     elif num == 10:
#         print('Римская цифра - X')
# else:
#     print('Ошибка! Вы ввели число не из данного диапазона')
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# 5. Масса и вес. Ученые измеряют массу физического тела в килограммах и вес в ньютонах.
# Если известна величина массы тела в килограммах, то при помощи приведенной ниже формулы
# можно рассчитать вес в ньютонах:  вес = масса х 9,8.
# Напишите программу, которая просит пользователя ввести массу тела и затем вычисляет
# его вес. Если вес тела больше 500 Н (ньютонов), то вывести сообщение, говорящее о том,
# что тело слишком тяжелое. Если вес тела меньше 100 Н, то показать сообщение, что оно
# слишком легкое.

# wt = float(input('Введите массу тела (в кг): '))
#
# weight = wt * 9.8
#
# if weight > 500:
#     print('Тело слишком тяжелое - ', format(weight, '.2f'), 'ньютонов')
# elif weight < 100:
#     print('тело слишком легкое - ', format(weight, '.2f'), 'ньютонов')
# else:
#     print('Ваш вес - ', format(weight, '.2f'), 'ньютонов')
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# 6. Волшебные даты. Дата 10 июня 1960 года является особенной, потому что если ее записать
# в приведенном ниже формате, то произведение дня и месяца равняется году:
# 10.06.60
# Разработайте программу, которая просит пользователя ввести месяц (в числовой форме),
# день и двузначный год. Затем программа должна определить, равняется ли произведение дня
# и месяца году. Если это так, то она должна вывести сообщение, говорящее, что введенная
# дата является волшебной. В противном случае она должна вывести сообщение,
# что дата не является волшебной.

# # Запрос данных от пользователя
# month = int(input('Введите месяц (в числовой форме): '))
# day = int(input('Введите день месяца: '))
# year = int(input('Введите двузначный год: '))
#
# # Вычисление произведения дня и месяца
# comp = day * month
#
# if comp == year:
#     print('Эта дата является волшебной!')
# else:
#     print('Эта дата не является волшебной...')
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# 7. Цветовой микшер. Красный, синий и желтый называются основными цветами, потому что
# их нельзя получить путем смешения других цветов. При смешивании двух основных цветов
# получается вторичный цвет:
# • если смешать красный и синий, то получится фиолетовый;
# • если смешать красный и желтый, то получится оранжевый;
# • если смешать синий и желтый, то получится зеленый.
# Разработайте программу, которая предлагает пользователю ввести названия двух основных
# цветов для смешивания. Если пользователь вводит что-нибудь помимо названий "красный",
# "синий" или "желтый", то программа должна вывести сообщение об ошибке. В противном случае
# программа должна вывести название вторичного цвета, который получится в результате.

# color_1 = input('Введите первый основной цвет(красный/синий/желтый): ')
# color_2 = input('Введите второй основной цвет(красный/синий/желтый): ')
#
# red = 'красный'
# blue = 'синий'
# yellow = 'желтый'
#
# if color_1 == red or color_1 == blue or color_1 == yellow:
#     if color_2 == red or color_2 == blue or color_2 == yellow:
#         if color_1 == red and color_2 == blue:
#             print('При смешивании этих двух цветов получится фиолетовый')
#         elif color_1 == red and color_2 == yellow:
#             print('При смешивании этих двух цветов получится оранжевый')
#         else:
#             print('При смешивании этих двух цветов получится зеленый')
#     else:
#         print('Ошибка! Вы ввели не основной цвет!')
# else:
#     print('Ошибка! Вы ввели не основной цвет!')
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# 8. Калькулятор сосисок для пикника. Допустим, что сосиски упакованы в пакеты по 10 штук,
# а булочки в пакеты по 8 штук. Напишите программу, которая вычисляет количество упаковок
# с сосисками и количество упаковок с булочками, необходимых для пикника с минимальными
# остатками. Программа должна запросить у пользователя количество участников пикника
# и количество хот-догов, которые будут предложены каждому участнику.
# Программа должна показать приведенные ниже подробности:
# • минимально необходимое количество упаковок с сосисками;
# • минимально необходимое количество упаковок с булочками;
# • количество оставшихся сосисок;
# • количество оставшихся булочек.

# # Запрос данных у пользователя
# people = int(input('Сколько будет участников пикника?: '))
# hot_dogs = int(
#     input('Сколько хот-догов будет предложено каждому участнику пикника?: '))
# # Всего хот-догов
# hot_dogs_all = people * hot_dogs
# # Вычисления
# sausages_per_pack = 10  # кол-во сосисок в упаковке
# buns_per_pack = 8  # кол-во булочек в упаковке
# pack_of_sausages = hot_dogs_all // sausages_per_pack  # кол-во упаковок сосисок
# pack_of_buns = hot_dogs_all // buns_per_pack  # кол-во упаковок булочек
# remains_sausages = (pack_of_sausages * sausages_per_pack) - \
#     hot_dogs_all   # остаток сосисок
# remains_buns = (pack_of_buns * buns_per_pack) - \
#     hot_dogs_all   # остаток булочек
# # Расчитываем кол-во упаковок сосисок для хот-догов
# if hot_dogs_all % sausages_per_pack != 0:   # если остаток от деления сосисок на упаковку не равен 0
#     # прибавление упаковок, если сосисок будет больше, чем в упаковке
#     pack_of_sausages += 1
#     print('Минимальное количество упаковок с сосисками нужно', pack_of_sausages)
#     print('Остаток сосисок', hot_dogs_all - (pack_of_sausages * sausages_per_pack), 'штук')
# else:
#     print('Минимальное количество упаковок с сосисками нужно', pack_of_sausages)
#     print('Остаток сосисок', remains_sausages, 'штук')
# # Расчитываем кол-во упаковок булочек для хот-догов
# if hot_dogs_all % buns_per_pack != 0:   # если остаток от деления булочек на упаковку не равен 0
#     # прибавление упаковок, если булок будет больше, чем в упаковке
#     pack_of_buns += 1
#     print('Минимальное количество упаковок с булочками нужно', pack_of_buns)
#     print('Остаток булочек', hot_dogs_all - (pack_of_buns * buns_per_pack), 'штук')
# else:
#     print('Минимальное количество упаковок с булочками нужно', pack_of_buns)
#     print('Остаток булочек', remains_buns, 'штук')
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# 9. Цвета колеса рулетки. На колесе рулетки карманы пронумерованы от 0 до 36.
# Ниже приведены цвета карманов:
# • карман 0 зеленый;
# • для карманов с 1 по 10 карманы с нечетным номером имеют красный цвет, карманы
#   с четным номером - черный;
# • для карманов с 11 по 18 карманы с нечетным номером имеют черный цвет, карманы
#   с четным номером красный;
# • для карманов с 19 по 28 карманы с нечетным номером имеют красный цвет, карманы
#   с четным номером черный;
# • для карманов с 29 по 36 карманы с нечетным номером имеют черный цвет, карманы
#   с четным номером -красный.

# Напишите программу, которая просит пользователя ввести номер кармана и показывает,
# является ли этот карман зеленым, красным или черным. Программа должна вывести сообщение
# об ошибке, если пользователь вводит число, которое лежит вне диапазона от 0 до 36.
# ----------------------------------------------------------------------------

# pocket = int(input('Введите номер кармана (от 0 до 36): '))
# if pocket >= 0 and pocket <= 36:
#     if pocket == 0:
#         print('Карман зеленый')
#     elif pocket >= 1 and pocket <=10:
#         if pocket % 2 == 0:
#             print('Карман черный')
#         else:
#             print('Карман красный')
#     elif pocket >= 11 and pocket <= 18:
#         if pocket % 2 == 0:
#             print('Карман красный')
#         else:
#             print('Карман черный')
#     elif pocket >= 19 and pocket <= 28:
#         if pocket % 2 == 0:
#             print('Карман черный')
#         else:
#             print('Карман красный')
#     elif pocket >= 29 and pocket <= 36:
#         if pocket % 2 == 0:
#             print('Карман красный')
#         else:
#             print('Карман черный')
# else:
#     print('Ошибка! Вы ввели число не из заданного промежутка (от 0 до 36)')
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# 10. Игра в подсчитывание монет. Создайте игру, которая просит пользователя ввести
# необходимое количество монет, чтобы получился ровно один рубль. Программа должна предложить
# пользователю ввести количество монет достоинством 5, 10 и 50 копеек. Если итоговое значение
# введенных монет равно одному рублю, то программа должна поздравить пользователя с выигрышем.
# В противном случае программа должна вывести сообщение, говорящее о том, была ли введенная сумма
# больше или меньше одного рубля. Подумайте о варианте игры, где вместо рубля используется доллар
# и разменные монеты: пенс, пятицентовик, десятицентовик и четвертак.

# # Запрос данных от пользователя
# copecks_5 = int(input('Введите количество монет по 5 копеек: '))
# copecks_10 = int(input('Введите количество монет по 10 копеек: '))
# copecks_50 = int(input('Введите количество монет по 50 копеек: '))
#
# # Подсчет введеных данных (кол - во копеек на их номинал)
# ruble = (copecks_5 * 0.05) + (copecks_10 * 0.1) + (copecks_50 * 0.5)
#
# if ruble > 1:
#     print('Вы проиграли... Введенная сумма получилась больше 1 рубля и составила', ruble, 'рублей')
# elif ruble < 1:
#     print('Вы проиграли... Введенная сумма получилась меньше 1 рубля и составила', ruble, 'рублей')
# else:
#     print('Ура! Вы выиграли!')
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# 11. Очки книжного клуба. Прозорливая книготорговая фирма владеет книжным клубом, который
# присуждает своим клиентам очки, основываясь на количестве книг, приобретенных ими ежемесячно.
# Очки присуждаются следующим образом:
# • если клиент приобретает 0 книг, то зарабатывает 0 очков:
# • если клиент приобретает 2 книги, то зарабатывает 5 очков;
# • если клиент приобретает 4 книги, то зарабатывает 15 очков;
# • если клиент приобретает 6 книг, то зарабатывает 30 очков;
# • если клиент приобретает 8 книг или больше, то зарабатывает 60 очков.
# Напишите программу, которая просит пользователя ввести количество книг, приобретенных им
# в этом месяце, и затем выводит присужденное количество очков.

# books = int(input('Введите количество книг, приобретенных в этом месяце: '))
#
# if books == 0:
#     print('В этом месяце у вас 0 очков')
# elif books == 2:
#     print('В этом месяце у вас 5 очков')
# elif books == 4:
#     print('В этом месяце у вас 15 очков')
# elif books == 6:
#     print('В этом месяце у вас 30 очков')
# elif books >= 8:
#     print('В этом месяце у вас 60 очков')
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# 12. Реализация программного обеспечения. Компания-разработчик программного обеcпечения
# продает программный пакет, который реализуется в рознице за 99 долларов. Скидки за количество
# предоставляются в соответствии с табл. 3.9:
# Количество, штук       Скидка, %
# 10-19                     10
# 20-49                     20
# 50-99                     30
# 100 или больше            40

# Напишите программу, которая просит пользователя ввести количество приобретенных пакетов.
# Программа должна затем показать сумму скидки (если таковая имеется) и общую сумму покупки
# после вычета скидки.

# Запрос данных у пользователя
# pp = int(input('Введите количество приобретенных пакетов: '))
#
# package = 99  # стоимость одного пакета
# all_cost_package = pp * package  # стоимость всех пакетов, которые приобретут
#
# if pp >= 10 and pp <= 19:
#     sale = all_cost_package * 0.1  # скидка
#     all_cost = all_cost_package - sale  # общая сумма покупки после вычета скидки
#     print('Ваша скидка составляет', format(sale, '.2f') ,'рублей')
#     print('Общая сумма покупки составляет', all_cost , 'рублей')
# elif pp >= 20 and pp <= 49:
#     sale = all_cost_package * 0.2  # скидка
#     all_cost = all_cost_package - sale  # общая сумма покупки после вычета скидки
#     print('Ваша скидка составляет', format(sale, '.2f') ,'рублей')
#     print('Общая сумма покупки составляет', all_cost , 'рублей')
# elif pp >= 50 and pp <= 99:
#     sale = all_cost_package * 0.3  # скидка
#     all_cost = all_cost_package - sale  # общая сумма покупки после вычета скидки
#     print('Ваша скидка составляет', format(sale, '.2f') ,'рублей')
#     print('Общая сумма покупки составляет', all_cost , 'рублей')
# elif pp >= 100:
#     sale = all_cost_package * 0.4  # скидка
#     all_cost = all_cost_package - sale  # общая сумма покупки после вычета скидки
#     print('Ваша скидка составляет', format(sale, '.2f') ,'рублей')
#     print('Общая сумма покупки составляет', all_cost , 'рублей')
# else:
#     print('У Вас нет скидки')
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# 13. Стоимость доставки. Грузовая компания срочной доставки взимает плату
# согласно ставкам, приведенным в табл. 3.10:
# Таблица 3.10. Ставки по доставке грузов

# Масса пакета, г                   Ставка за 100 г, рублей
# 200 или меньше                            150
# Свыше 200, но не более 600                300
# Свыше 600, но не более 1000               400
# Свыше 1000                                475
#
# Напишите программу, которая просит пользователя ввести массу пакета
# и показывает плату за доставку.
#
# Запрос данных от пользователя
# mass = int(input('Введите массу пакета (в граммах): '))
# mass_1 = mass / 100
# if mass <= 200:
#     cost = mass_1 * 150    # расчет стоимости от ставки
# elif mass > 200 and mass <= 600:
#     cost = mass_1 * 300
# elif mass > 600 and mass <= 1000:
#     cost = mass_1 * 400
# else:
#     cost = mass_1 * 475
# print('Стоимость доставки составляет', cost, 'рублей')
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# 14. Индекс массы тела. Напишите программу, которая вычисляет и показывает
# индекс массы тела (ИМТ) человека. ИМТ часто используется для определения,
# весит ли человек больше или меньше нормы для своего.
# ИМТ человека рассчитывают по формуле:
# имт = масса / рост,
# где масса измеряется в килограммах, а рост в метрах.
# Программа должна попросить пользователя ввести массу и рост и затем
# показать ИМТ пользователя. Программа также должна вывести сообщение, указывающее,
# имеет ли человек оптимальную, недостаточную или избыточную массу. Масса человека
# считается оптимальной, если его ИМТ находится между 18.5 и 25. Если ИМТ меньше 18.5,
# то считается, что человек весит ниже нормы. Если значение ИМТ больше 25,
# то считается, что человек весит больше нормы.

# # Запрос данных от пользователя
# weight = float(input('Введите массу тела в килограммах: '))
# height = float(input('Введите рост в метрах: '))
# # Расчет ИМТ
# imt = weight / height
# print('ИМТ вашего тела составляет', format(imt, '.1f'))
#
# if imt < 18.5:
#     print('Ваш вес ниже нормы')
# if imt >= 18.5 and imt <= 25:
#     print('Ваш вес считается оптимальным')
# else:
#     print('Ваш вес выше нормы')
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# 15. Калькулятор времени. Напишите программу, которая просит пользователя ввести
# количество секунд и работает следующим образом.
# • В минуте 60 секунд. Если число введенных пользователем секунд больше или равно
#   60, то программа должна преобразовать число секунд в минуты и секунды.
# • В часе 3 600 секунд. Если число введенных пользователем секунд больше или равно
#   3 600, то программа должна преобразовать число секунд в часы, минуты и секунды.
# • В дне 86 400 секунд. Если число введенных пользователем секунд больше или равно
#   86 400, то программа должна преобразовать число секунд в дни, часы, минуты и секунды.

# seconds = int(input('Введите количество секунд: '))
#
# if seconds >= 86400:    # Например, ввели 91 000 секунду
#     # // - деление без остатка (например, 91000 // 86400 = 1 день)
#     d = seconds // 86400  # дни
#
#     # Находим оставшиеся секунды, учитывая 1 день.
#     # % - остаток от деления (например, 91000 % 86400 = 4600 секунд)
#     # Теперь переменная seconds ссылается на новое значение - 4600
#     seconds = seconds % 86400  # новое значение переменной seconds
#
#     # Находим часы. (например, 4600 // 3600 = 1 час)
#     h = seconds // 3600  # часы
#
#     # Новое значение переменной (4600 % 3600 = 1000 секунд)
#     seconds = seconds % 3600
#
#     # Находим минуты. (1000 // 60 = 16 минут)
#     m = seconds // 60  # минуты
#
#     # Находим оставшиеся секунды (1000 % 60 = 40 секунд)
#     seconds = seconds % 60  # секунды
#     print(d, 'дней', h, 'часов', m, 'минут', seconds, 'секунд')
# elif seconds >= 3600:
#     h = seconds // 3600  # часы
#     seconds = seconds % 3600  # новое кол-во секунд с учетом часов
#     m = seconds // 60   # минуты
#     seconds = seconds % 60  # оставшиеся секунды
#     print(h, 'часов', m, 'минут', seconds, 'секунд')
# elif seconds >= 60:
#     m = seconds // 60  # минуты
#     seconds = seconds % 60    # оставшиеся секунды
#     print(m, 'минут', seconds, 'секунд')
# else:
#     print(seconds, 'секунд')
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# 16. Дни в феврале. Февраль обычно имеет 28 дней. Но в високосный год в феврале 29 дней.
# Напишите программу, которая просит пользователя ввести год. Затем она должна показать
# количество дней в феврале в этом году. Для определения високосных лет
# используйте следующие критерии.
# • Определить, делится ли год на 100. Если да, то этот год високосный тогда и только тогда,
#   если он также делится на 400. Например, 2000 является високосным годом, а 2100 нет.
# • Если год не делится на 100, то этот год високосный тогда и только тогда,
#   если он делится на 4. Например, 2008 является високосным годом, но 2009 нет.
# Вот пример выполнения этой программы:
# Введите год: 2008 [Enter]
# В 2008 году в феврале 29 дней.

# year = int(input('Введите год: '))
#
# if year % 100 == 0 and year % 400 == 0:
#     print('В', year, 'году в феврале 29 дней')
# elif year % 100 != 0 and year % 4 == 0:
#     print('В', year, 'году в феврале 29 дней')
# else:
#     print('В', year, 'году в феврале 28 дней')
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# 17. Диагностическое дерево проверки качества Wi-Fi. На рис. 3.19 приведена упрощенная
# блок-схема поиска причины плохого Wi-Fi-соединения. Используйте ее для создания программы,
# которая проведет пользователя по шагам исправления плохого Wi-Fi-соединения.
#
# Вот пример вывода программы:
# Перезагрузите компьютер и попробуйте подключиться.
# Вы исправили проблему? нет [Enter]
# Перезагрузите маршрутизатор и попробуйте подключиться.
# Вы исправили проблему? да [Enter]

# Обратите внимание, что программа завершается, как только решение проблемы найдено.

# Вот еще один пример вывода программы:
# Перезагрузите компьютер и попробуйте подключиться.
# Вы исправили проблему? нет [Enter]
# Перезагрузите маршрутизатор и попробуйте подключиться.
# Вы исправили проблему? нет [Enter]
# Убедитесь, что кабели между маршрутизатором и модемом прочно подсоединены.
# Вы исправили проблему? нет [Enter]
# Переместите маршрутизатор на новое место.
# Вы исправили проблему? нет [Enter]
# Возьмите новый маршрутизатор.

# print('Перезагрузите компьютер и попробуйте подключиться')
# problem = input('Вы исправили проблему?: ')
# if problem == 'нет':
#     print('Перезагрузите маршрутизатор и попробуйте подключиться.')
#     problem = input('Вы исправили проблему?: ')
#     if problem == 'нет':
#         print('Убедитесь, что кабели между маршрутизатором и модемом прочно подсоединены.')
#         problem = input('Вы исправили проблему?: ')
#         if problem == 'нет':
#             print('Переместите маршрутизатор на новое место.')
#             problem = input('Вы исправили проблему?: ')
#             if problem == 'нет':
#                 print('Возьмите новый маршрутизатор.')
#             else:
#                 print('Возьмите новый маршрутизатор.')
#         else:
#             print('Возьмите новый маршрутизатор.')
#     else:
#         print('Возьмите новый маршрутизатор.')
# else:
#     print('Возьмите новый маршрутизатор.')

# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# 18. Селектор ресторанов. На вашу встречу выпускников собирается прибыть группа ваших
# друзей, и вы хотите их повести в местный ресторан на ужин. Вы не уверены, что ваши
# друзья придерживаются диетических ограничений, но ваши варианты выбора ресторана
# будут такими.
# Изысканные гамбургеры от Джо - вегетарианская: нет, веганская (строгая вегетариан-
# ская): нет, безглютеновая: нет.
# Центральная пиццерия - вегетарианская: да, веганская: нет, безглютеновая: да.
# Кафе за углом - вегетарианская: да, веганская: да, безглютеновая: да,
# Блюда от итальянской мамы - вегетарианская: да, веганская: нет, безглютеновая: нет.
# Кухня шеф-повара - вегетарианская: да, веганская: да, безглютеновая: да.
# Напишите программу, которая запрашивает, есть ли в группе вегетарианцы, веганцы либо
# приверженцы безглютеновой диеты, после чего она выводит только те рестораны,
# в которые можно повести группу друзей.

# Вот пример вывода программы:
# Будет ли на ужине вегетарианец? да [Enter]
# Будет ли на ужине веганец? нет [Enter]
# Будет ли на ужине приверженец безглютеновой диеты? да [Enter]
# ---------------
# Вот ваши варианты ресторанов:
# Центральная пиццерия
# Кафе за углом
# Кухня шеф-повара


# Вот еще один пример вывода программы:
# Будет ли на ужине вегетарианец? да [Enter]
# Будет ли на ужине веганец? да [Enter]
# Будет ли на ужине приверженец безглютеновой диеты? да [Enter]
# ------------
# Вот ваши варианты ресторанов:
# Кафе за углом

# vegetarian = input('Будет ли на ужин вегетарианец? ')
# vegan = input('Будет ли на ужине веганец? ')
# gluten_diet = input('Будет ли на ужине приверженец безглютеновой диеты? ')
#
# print('Вот ваши варианты ресторанов:')
#
# if vegetarian == 'да' or vegetarian == 'нет' and vegan == 'да' or vegan == 'нет' \
#     and gluten_diet == 'да' or gluten_diet == 'нет':
#     print('Кафе за углом')
#     print('Кухня шеф-повара')
# elif vegetarian == 'да' or vegetarian == 'нет' and vegan == 'нет' and gluten_diet == 'да' or gluten_diet == 'нет':
#     print('Центральная пиццерия')
# elif vegetarian == 'да' or vegetarian == 'нет' and vegan == 'нет' and gluten_diet == 'нет':
#     print('Блюда от итальянской мамы')
# else:
#     print('Изысканные гамбургеры от Джо')
# ----------------------------------------------------------------------------
